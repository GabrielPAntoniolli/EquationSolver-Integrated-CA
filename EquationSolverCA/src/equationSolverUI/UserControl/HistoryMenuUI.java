/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package equationSolverUI.UserControl;

import entity.History;
import entity.User;
import equationSolverUI.UserMenuUI;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import dbRepository.DbConnector;

/**
 *
 * this menu allows users to check their previous operations. if the current user is the admin, it allows him to perform some operations with the users history.
 */
public class HistoryMenuUI extends javax.swing.JFrame {

    DefaultTableModel tableModel;
    User curr;
    User historyUser;
    
    /**
     * This class has two constructor because will offer different functionalities depending on who is accessing it.
     * @param curr 
     */
    public HistoryMenuUI(User curr) {
        initComponents();
        this.curr = curr;
        initTable();
        RemoveButton.setEnabled(false);
    }
    
    public HistoryMenuUI(User curr, User historyUser) {
        initComponents();
        this.curr = curr;
        this.historyUser = historyUser;
        initTableAdmin();
    }

    /**
     * this method initialise the table with all history information of a certain user.
     */
    public void initTable(){
    
        DbConnector conn = new DbConnector();
        table.setCellSelectionEnabled(false);
        table.setRowSelectionAllowed(true);
    
        tableModel = (DefaultTableModel) table.getModel();

        for (History currHistory : conn.getAllHistoryByUserId(curr.getId())) {

            Object[] data = {currHistory.getHistory_id(), currHistory.getFirst_equation(), currHistory.getSecond_equation(), currHistory.getThird_equation(), currHistory.getStatus()};
            tableModel.addRow(data);
        }
    }
    public void initTableAdmin(){
    
        DbConnector conn = new DbConnector();
        table.setCellSelectionEnabled(false);
        table.setRowSelectionAllowed(true);
    
        tableModel = (DefaultTableModel) table.getModel();

        for (History currHistory : conn.getAllHistoryByUserId(historyUser.getId())) {

            Object[] data = {currHistory.getHistory_id(), currHistory.getFirst_equation(), currHistory.getSecond_equation(), currHistory.getThird_equation(), currHistory.getStatus()};
            tableModel.addRow(data);
        }
    }
    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        RemoveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "First_Equation", "Second_Equation", "Third_Equation", "Status_id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(10);
            table.getColumnModel().getColumn(1).setPreferredWidth(55);
            table.getColumnModel().getColumn(2).setPreferredWidth(55);
            table.getColumnModel().getColumn(3).setPreferredWidth(55);
            table.getColumnModel().getColumn(4).setPreferredWidth(35);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("History of Calculations");

        RemoveButton.setText("Remove");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79))
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(RemoveButton)
                .addGap(41, 41, 41)
                .addComponent(refreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addGap(180, 180, 180))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RemoveButton)
                    .addComponent(cancelButton)
                    .addComponent(refreshButton))
                .addContainerGap(87, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * by clicking in Cancel the current will be taken to the previous screen.
 * @param evt 
 */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        
        this.dispose();
        if(curr.getIsAdmin() == true){
        
            ListOfUsersUI back = new ListOfUsersUI(curr);
            back.setVisible(true);
            
        }else{
        UserMenuUI userMenu = new UserMenuUI(curr);
        userMenu.setVisible(true);
        
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * By clicking in remove, a warning message will pop up, asking if the admin is sure about removing that history, if the answer is yes the history will be deleted.
     * @param evt 
     */
    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed
        // TODO add your handling code here:
        
        try{
        int n = JOptionPane.showConfirmDialog(null, "Do you really want to delete this history?","",JOptionPane.YES_NO_OPTION);
            if(n == JOptionPane.YES_OPTION){
                DbConnector conn = new DbConnector();
                Object obj = table.getValueAt(table.getSelectedRow(), 0);
                int index = (int)obj;
                conn.removeHistoryById(index);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "No history row selected, select a row and try again!");
        }
    }//GEN-LAST:event_RemoveButtonActionPerformed

    
    /**
     * After some actions are performed that table will not automatically display it, so the refresh button will make sure that the table will be reloaded.
     * @param evt 
     */
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        
            
            if(historyUser != null){
                HistoryMenuUI historyMenu = new HistoryMenuUI(curr,historyUser);
                historyMenu.setVisible(true);
                this.dispose();
            }else{
                HistoryMenuUI historyMenu = new HistoryMenuUI(curr);
                historyMenu.setVisible(true);
                this.dispose();
            }
    }//GEN-LAST:event_refreshButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HistoryMenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HistoryMenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HistoryMenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HistoryMenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new HistoryMenuUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RemoveButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
